{
	"name": "vscoq",
	"displayName": "VSCoq",
	"description": "An IDE for the Coq Proof Assistant",
	"author": {
		"name": "Christian J. Bell",
		"email": "siegebell@gmail.com",
		"url": "http://people.csail.mit.edu/cj/"
	},
	"version": "0.3.0",
	"publisher": "siegebell",
	"license": "MIT",
	"engines": {
		"vscode": "^1.23.0"
	},
	"categories": [
		"Programming Languages"
	],
	"keywords": [
		"coq",
		"theorem prover",
		"proof assistant"
	],
	"readme": "https://github.com/coq-community/vscoq/blob/master/README.md",
	"bugs": "https://github.com/coq-community/vscoq/issues",
	"homepage": "https://github.com/coq-community/vscoq/blob/master/README.md",
	"activationEvents": [
		"onLanguage:coq"
	],
	"contributes": {
		"languages": [
			{
				"id": "coq",
				"aliases": [
					"Coq",
					"coq",
					"Gallina",
					"gallina"
				],
				"extensions": [
					".v"
				],
				"configuration": "./client/coq.configuration.json"
			}
		],
		"grammars": [
			{
				"language": "coq",
				"scopeName": "source.coq",
				"path": "./client/syntaxes/coq.tmLanguage"
			}
		],
		"configuration": {
			"type": "object",
			"title": "Coq configuration",
			"properties": {
				"coqtop.binPath": {
					"type": "string",
					"default": "",
					"description": "Path to coqc and coqtop binaries."
				},
				"coqtop.args": {
					"type": "array",
					"default": [],
					"description": "A list of arguments to send to coqtop."
				},
				"coqtop.startOn": {
					"type": "string",
					"enum": [
						"open-script",
						"interaction"
					],
					"default": "interaction",
					"description": "When to start an instance of coqtop: when a Coq script is opened (`open-script`) or else when the user begins interaction (`interaction`; default)."
				},
				"coq.loadCoqProject": {
					"type": "boolean",
					"default": true,
					"description": "Load settings from _CoqProject (if found at the root of the Code project)"
				},
				"coq.moveCursorToFocus": {
					"type": "boolean",
					"default": true,
					"description": "Move the editor's cursor position as Coq interactively steps forward/backward a command"
				},
				"coq.interpretToEndOfSentence": {
					"type": "boolean",
					"default": false,
					"description": "Interpret to point will interpret up to *and including* the sentence at the cursor"
				},
				"coq.autoRevealProofStateAtCursor": {
					"type": "boolean",
					"default": false,
					"description": "If `true`, then auto-update the proof view with the cached state of the sentence the at the cursor. States are only cached when stepping through a proof, so the proof view will not be updated if e.g. the sentence was processed asynchronously and never had direct focus."
				},
				"coq.revealProofStateAtCursorDirection": {
					"type": "string",
					"enum": [
						"preceding",
						"subsequent"
					],
					"default": "preceding",
					"description": "Controls whether viewing the state of a sentence reveaks either the parent/source/preceding or child/subsequent state."
				},
				"coq.showProofViewOn": {
					"type": "string",
					"enum": [
						"open-script",
						"first-interaction",
						"manual"
					],
					"default": "first-interaction",
					"description": "Create the proof view when a Coq script is opened, the user first interacts with coqtop, or else let the user do it manually."
				},
				"coq.format.enable": {
					"type": "boolean",
					"default": true,
					"description": "If `false`, then all auto-formatting under `coq.format` is disabled"
				},
				"coq.format.indentAfterBullet": {
					"type": "string",
					"enum": [
						"none",
						"indent",
						"align"
					],
					"default": "none",
					"description": "Control how to indent the line after a bullet. \"none\" - no indent; \"indent\" - tab-indent; \"align\" - align to the previous line's tactic"
				},
				"coq.format.indentAfterOpenProof": {
					"type": "boolean",
					"default": true,
					"description": "Indent after opening a proof with 'Proof'"
				},
				"coq.format.unindentOnCloseProof": {
					"type": "boolean",
					"default": true,
					"description": "Auto-unindent `Qed.`, `Defined.`, and `Admitted.`. Note: requires `editor.formatOnType' to be set to `true` in settings.json"
				}
			}
		},
		"commands": [
			{
				"command": "extension.coq.quit",
				"title": "Quit",
				"category": "Coq"
			},
			{
				"command": "extension.coq.reset",
				"title": "Reset",
				"category": "Coq"
			},
			{
				"command": "extension.coq.interrupt",
				"title": "Interrupt",
				"category": "Coq"
			},
			{
				"command": "extension.coq.finishComputations",
				"title": "Finish Computations",
				"category": "Coq"
			},
			{
				"command": "extension.coq.stepForward",
				"title": "Step Forward",
				"category": "Coq"
			},
			{
				"command": "extension.coq.stepBackward",
				"title": "Step Backward",
				"category": "Coq"
			},
			{
				"command": "extension.coq.interpretToPoint",
				"title": "Interpret To Point",
				"category": "Coq"
			},
			{
				"command": "extension.coq.interpretToPointSynchronous",
				"title": "Interpret To Point (Synchronous)",
				"category": "Coq"
			},
			{
				"command": "extension.coq.interpretToEnd",
				"title": "Interpret To End",
				"category": "Coq"
			},
			{
				"command": "extension.coq.interpretToEndSynchronous",
				"title": "Interpret To End (Synchronous)",
				"category": "Coq"
			},
			{
				"command": "extension.coq.moveCursorToFocus",
				"title": "Move cursor to the current focus location",
				"category": "Coq"
			},
			{
				"command": "extension.coq.query.check",
				"title": "Check",
				"description": "Check the type of term at the cursor",
				"category": "Coq"
			},
			{
				"command": "extension.coq.query.locate",
				"title": "Locate",
				"description": "Locate the term at the cursor",
				"category": "Coq"
			},
			{
				"command": "extension.coq.query.search",
				"title": "Search",
				"description": "Search for the term pattern at the cursor",
				"category": "Coq"
			},
			{
				"command": "extension.coq.query.print",
				"title": "Print",
				"description": "Print the definition of the term at the cursor",
				"category": "Coq"
			},
			{
				"command": "extension.coq.query.about",
				"title": "About",
				"description": "About the term pattern at the cursor",
				"category": "Coq"
			},
			{
				"command": "extension.coq.query.searchAbout",
				"title": "SearchAbout",
				"description": "SearchAbout the term pattern at the cursor",
				"category": "Coq"
			},
			{
				"command": "extension.coq.query.prompt.check",
				"title": "Prompt Check",
				"description": "Check the type of a term",
				"category": "Coq"
			},
			{
				"command": "extension.coq.query.prompt.locate",
				"title": "Prompt Locate",
				"description": "Locate a term",
				"category": "Coq"
			},
			{
				"command": "extension.coq.query.prompt.about",
				"title": "Prompt About",
				"description": "About a term",
				"category": "Coq"
			},
			{
				"command": "extension.coq.query.prompt.search",
				"title": "Prompt Search",
				"description": "Search for a term",
				"category": "Coq"
			},
			{
				"command": "extension.coq.query.prompt.searchAbout",
				"title": "Prompt SearchAbout",
				"description": "SearchAbout a term",
				"category": "Coq"
			},
			{
				"command": "extension.coq.query.prompt.print",
				"title": "Prompt Print",
				"description": "Print the definition of a term",
				"category": "Coq"
			},
			{
				"command": "extension.coq.display.toggle",
				"title": "Display options",
				"category": "Coq"
			},
			{
				"command": "extension.coq.display.toggle.implicitArguments",
				"title": "Display Implicit Arguments",
				"category": "Coq"
			},
			{
				"command": "extension.coq.display.toggle.coercions",
				"title": "Display Coercions",
				"category": "Coq"
			},
			{
				"command": "extension.coq.display.toggle.rawMatchingExpressions",
				"title": "Display Raw Matching Expressions",
				"category": "Coq"
			},
			{
				"command": "extension.coq.display.toggle.notations",
				"title": "Display Notations",
				"category": "Coq"
			},
			{
				"command": "extension.coq.display.toggle.allBasicLowLevelContents",
				"title": "Display All Basic Low Level Contents",
				"category": "Coq"
			},
			{
				"command": "extension.coq.display.toggle.existentialVariableInstances",
				"title": "Display Existential Variable Instances",
				"category": "Coq"
			},
			{
				"command": "extension.coq.display.toggle.universeLevels",
				"title": "Display Universe Levels",
				"category": "Coq"
			},
			{
				"command": "extension.coq.display.toggle.allLowLevelContents",
				"title": "Display All LowLevel Contents",
				"category": "Coq"
			},
			{
				"command": "extension.coq.proofView.open",
				"title": "Open proof view",
				"category": "Coq"
			},
			{
				"command": "extension.coq.proofView.viewStateAt",
				"title": "View the proof-state at the cursor position",
				"category": "Coq"
			},
			{
				"command": "extension.coq.ltacProf.getResults",
				"title": "View ltac profile",
				"category": "Coq"
			}
		],
		"keybindings": [
			{
				"key": "ctrl+alt+.",
				"mac": "ctrl+alt+.",
				"command": "extension.coq.moveCursorToFocus",
				"when": "editorTextFocus && editorLangId == coq"
			},
			{
				"key": "ctrl+alt+a",
				"mac": "cmd+ctrl+a",
				"command": "extension.coq.query.about",
				"when": "editorTextFocus && editorLangId == coq"
			},
			{
				"key": "ctrl+alt+k",
				"mac": "cmd+ctrl+k",
				"command": "extension.coq.query.searchAbout",
				"when": "editorTextFocus && editorLangId == coq"
			},
			{
				"key": "ctrl+alt+l",
				"mac": "cmd+ctrl+l",
				"command": "extension.coq.query.locate",
				"when": "editorTextFocus && editorLangId == coq"
			},
			{
				"key": "ctrl+alt+c",
				"mac": "cmd+ctrl+c",
				"command": "extension.coq.query.check",
				"when": "editorTextFocus && editorLangId == coq"
			},
			{
				"key": "ctrl+alt+p",
				"mac": "cmd+ctrl+p",
				"command": "extension.coq.query.print",
				"when": "editorTextFocus && editorLangId == coq"
			},
			{
				"key": "alt+home",
				"mac": "cmd+ctrl+home",
				"command": "extension.coq.reset",
				"when": "editorTextFocus && editorLangId == coq"
			},
			{
				"key": "alt+home",
				"mac": "cmd+ctrl+home",
				"command": "extension.coq.reset",
				"when": "resourceScheme==coq-view"
			},
			{
				"key": "ctrl+alt+`",
				"mac": "cmd+ctrl+`",
				"command": "extension.coq.interrupt",
				"when": "editorTextFocus && editorLangId == coq"
			},
			{
				"key": "ctrl+alt+`",
				"mac": "cmd+ctrl+`",
				"command": "extension.coq.interrupt",
				"when": "resourceScheme==coq-view"
			},
			{
				"key": "ctrl+alt+pausebreak",
				"mac": "cmd+ctrl+pausebreak",
				"command": "extension.coq.interrupt",
				"when": "editorTextFocus && editorLangId == coq"
			},
			{
				"key": "ctrl+alt+pausebreak",
				"mac": "cmd+ctrl+pausebreak",
				"command": "extension.coq.interrupt",
				"when": "resourceScheme==coq-view"
			},
			{
				"key": "alt+down",
				"mac": "ctrl+alt+down",
				"command": "extension.coq.stepForward",
				"when": "editorTextFocus && editorLangId == coq"
			},
			{
				"key": "alt+down",
				"mac": "ctrl+alt+down",
				"command": "extension.coq.stepForward",
				"when": "resourceScheme==coq-view"
			},
			{
				"key": "alt+up",
				"mac": "ctrl+alt+up",
				"command": "extension.coq.stepBackward",
				"when": "editorTextFocus && editorLangId == coq"
			},
			{
				"key": "alt+up",
				"mac": "ctrl+alt+up",
				"command": "extension.coq.stepBackward",
				"when": "resourceScheme==coq-view"
			},
			{
				"key": "alt+right",
				"mac": "ctrl+alt+right",
				"command": "extension.coq.interpretToPoint",
				"when": "editorTextFocus && editorLangId == coq"
			},
			{
				"key": "alt+right",
				"mac": "ctrl+alt+right",
				"command": "extension.coq.interpretToPoint",
				"when": "resourceScheme==coq-view"
			},
			{
				"key": "alt+end",
				"mac": "ctrl+alt+end",
				"command": "extension.coq.interpretToEnd",
				"when": "editorTextFocus && editorLangId == coq"
			},
			{
				"key": "alt+end",
				"mac": "ctrl+alt+end",
				"command": "extension.coq.interpretToEnd",
				"when": "resourceScheme==coq-view"
			},
			{
				"key": "shift+alt+i",
				"mac": "shift+ctrl+i",
				"command": "extension.coq.display.toggle.implicitArguments",
				"when": "editorTextFocus && editorLangId == coq"
			},
			{
				"key": "shift+alt+i",
				"mac": "shift+ctrl+i",
				"command": "extension.coq.display.toggle.implicitArguments",
				"when": "resourceScheme==coq-view"
			},
			{
				"key": "shift+alt+c",
				"mac": "shift+ctrl+c",
				"command": "extension.coq.display.toggle.coercions",
				"when": "editorTextFocus && editorLangId == coq"
			},
			{
				"key": "shift+alt+c",
				"mac": "shift+ctrl+c",
				"command": "extension.coq.display.toggle.coercions",
				"when": "resourceScheme==coq-view"
			},
			{
				"key": "shift+alt+n",
				"mac": "shift+ctrl+n",
				"command": "extension.coq.display.toggle.notations",
				"when": "editorTextFocus && editorLangId == coq"
			},
			{
				"key": "shift+alt+n",
				"mac": "shift+ctrl+n",
				"command": "extension.coq.display.toggle.notations",
				"when": "resourceScheme==coq-view"
			}
		],
		"menus": {
			"editor/context": [
				{
					"when": "resourceLangId == coq",
					"command": "extension.coq.interpretToPoint",
					"group": "navigation"
				},
				{
					"when": "resourceLangId == coq",
					"command": "extension.coq.query.check",
					"group": "queries"
				},
				{
					"when": "resourceLangId == coq",
					"command": "extension.coq.query.print",
					"group": "queries"
				},
				{
					"when": "resourceLangId == coq",
					"command": "extension.coq.query.searchAbout",
					"group": "queries"
				},
				{
					"when": "resourceLangId == coq",
					"command": "extension.coq.query.locate",
					"group": "queries"
				}
			]
		},
		"snippets": [
			{
				"language": "coq",
				"path": "./client/snippets/coq.json"
			}
		],
		"colors": [
			{
				"id": "coq.proofviewText",
				"description": "Color for proofview text.",
				"defaults": {
					"dark": "#cccccc",
					"light": "#333333",
					"highContrast": "#333333"
				}
			},
			{
				"id": "coq.proofviewMessage",
				"description": "Color for proofview messages.",
				"defaults": {
					"dark": "#cccccc",
					"light": "#333333",
					"highContrast": "#333333"
				}
			},
			{
				"id": "coq.proofviewError",
				"description": "Color for proofview errors.",
				"defaults": {
					"dark": "#ffc0cb",
					"light": "#ff0000",
					"highContrast": "#ff0000"
				}
			},
			{
				"id": "coq.hypothesisIdent",
				"description": "Color for goal hypotheses identifiers.",
				"defaults": {
					"dark": "#20b2aa",
					"light": "#006400",
					"highContrast": "#006400"
				}
			},
			{
				"id": "coq.hypothesesSeparator",
				"description": "Color for hypotheses separator.",
				"defaults": {
					"dark": "#ffffff66",
					"light": "#00000033",
					"highContrast": "#00000033"
				}
			},
			{
				"id": "coq.oddHypothesisBackground",
				"description": "Background color for hypotheses with odd index.",
				"defaults": {
					"dark": "#0000000d",
					"light": "#ffffff0d",
					"highContrast": "#ffffff0d"
				}
			},
			{
				"id": "coq.newHypothesisBackground",
				"description": "Background color for new hypotheses.",
				"defaults": {
					"dark": "#00ff0017",
					"light": "#00aa0040",
					"highContrast": "#00aa0040"
				}
			},
			{
				"id": "coq.changedHypothesisBackground",
				"description": "Background color for changed hypotheses.",
				"defaults": {
					"dark": "#0000ff26",
					"light": "#0000ff0d",
					"highContrast": "#0000ff0d"
				}
			},
			{
				"id": "coq.goalId",
				"description": "Color of goal identifiers.",
				"defaults": {
					"dark": "#add8e6",
					"light": "#00008b",
					"highContrast": "#00008b"
				}
			},
			{
				"id": "coq.addedCharacter",
				"description": "Color of added characters (in diffs).",
				"defaults": {
					"dark": "#00fa001a",
					"light": "#00fa0033",
					"highContrast": "#00fa0033"
				}
			},
			{
				"id": "coq.removedCharacter",
				"description": "Color of removed characters (in diffs).",
				"defaults": {
					"dark": "#fa000099",
					"light": "#fa000033",
					"highContrast": "#fa000033"
				}
			},
			{
				"id": "coq.mainSubgoalBackground",
				"description": "Background color for main subgoal.",
				"defaults": {
					"dark": "#ffffff0d",
					"light": "#0000000d",
					"highContrast": "#0000000d"
				}
			},
			{
				"id": "coq.subgoalBackground",
				"description": "Background color for subgoals.",
				"defaults": {
					"dark": "#ffffff0d",
					"light": "#0000000d",
					"highContrast": "#0000000d"
				}
			},
			{
				"id": "coq.subgoalSeparator",
				"description": "Color of subgoal separators.",
				"defaults": {
					"dark": "#ffffff33",
					"light": "#00000033",
					"highContrast": "#00000033"
				}
			},
			{
				"id": "coq.termNotation",
				"description": "Color of term notations.",
				"defaults": {
					"dark": "#ff8c00",
					"light": "#ff8c00",
					"highContrast": "#ff8c00"
				}
			},
			{
				"id": "coq.termKeyword",
				"description": "Color of term keywords.",
				"defaults": {
					"dark": "#6495ed",
					"light": "#6495ed",
					"highContrast": "#6495ed"
				}
			},
			{
				"id": "coq.termEvar",
				"description": "Color of existential variables.",
				"defaults": {
					"dark": "#ff8c00",
					"light": "#ff8c00",
					"highContrast": "#ff8c00"
				}
			},
			{
				"id": "coq.termPath",
				"description": "Color of term paths.",
				"defaults": {
					"dark": "#9370d8",
					"light": "#ff8c00",
					"highContrast": "#ff8c00"
				}
			},
			{
				"id": "coq.termReference",
				"description": "Color of name references in terms.",
				"defaults": {
					"dark": "#7cfc00",
					"light": "#32cd32",
					"highContrast": "#32cd32"
				}
			},
			{
				"id": "coq.termType",
				"description": "Color of types in terms.",
				"defaults": {
					"dark": "#f08080",
					"light": "#ff7f50",
					"highContrast": "#ff7f50"
				}
			},
			{
				"id": "coq.termVariable",
				"description": "Color of variables in terms.",
				"defaults": {
					"dark": "#7fff00",
					"light": "#20b2aa",
					"highContrast": "#20b2aa"
				}
			},
			{
				"id": "coq.debugMessage",
				"description": "Color of debug messages.",
				"defaults": {
					"dark": "#9370d8",
					"light": "#daa520",
					"highContrast": "#daa520"
				}
			},
			{
				"id": "coq.errorMessage",
				"description": "Color of error messages.",
				"defaults": {
					"dark": "#ff0000",
					"light": "#ff0000",
					"highContrast": "#ff0000"
				}
			},
			{
				"id": "coq.warningMessage",
				"description": "Color of warning messages.",
				"defaults": {
					"dark": "#ffff00",
					"light": "#ffff00",
					"highContrast": "#ffff00"
				}
			},
			{
				"id": "coq.moduleKeyword",
				"description": "Color of module keywords.",
				"defaults": {
					"dark": "#6495ed",
					"light": "#6495ed",
					"highContrast": "#6495ed"
				}
			},
			{
				"id": "coq.tacticKeyword",
				"description": "Color of tactic keywords.",
				"defaults": {
					"dark": "#6495ed",
					"light": "#6495ed",
					"highContrast": "#6495ed"
				}
			},
			{
				"id": "coq.tacticPrimitive",
				"description": "Color of tactic primitives.",
				"defaults": {
					"dark": "#5f9ea0",
					"light": "#5f9ea0",
					"highContrast": "#5f9ea0"
				}
			},
			{
				"id": "coq.tacticString",
				"description": "Color of tactic strings.",
				"defaults": {
					"dark": "#ffa500",
					"light": "#ffa500",
					"highContrast": "#ffa500"
				}
			}
		]
	},
	"main": "./client/out/src/extension",
	"scripts": {
		"vscode:prepublish": "npm run compile",
		"compile": "cd client && npm run compile && cd ../server && npm run compile && cd ../html_views && npm run compile",
		"postinstall": "cd client && npm install && cd ../server && npm install && cd ../html_views && npm install && cd .."
	},
	"devDependencies": {
		"ts-prune": "^0.2.3",
		"typescript": "^3.6.3",
		"vsce": "^1.66.0"
	},
	"repository": {
		"type": "git",
		"url": "https://github.com/coq-community/vscoq.git"
	},
	"__metadata": {
		"id": "ddfd0191-e75d-4ac2-870d-81db351b747f",
		"publisherDisplayName": "siegebell",
		"publisherId": "53fa0d93-9c7e-4c3a-a574-71964f5bcb0e"
	}
}
